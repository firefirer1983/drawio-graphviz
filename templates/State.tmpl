class States(StateEnum):
{%- for state in states %}
    {{ state.name }}: str = "{{ state.label }}"
{%- endfor %}

{% for state in states %}
{% if state.on_enter and state.on_exit %}
{{ state.name }} = LabelNestedState(name=States.{{ state.name }}, on_enter={{ state.on_enter }}, on_exit={{ state.on_exit }})
{% elif state.on_enter and not state.on_exit %}
{{ state.name }} = LabelNestedState(name=States.{{ state.name }}, on_enter={{ state.on_enter }})
{% elif not state.on_enter and state.on_exit %}
{{ state.name }} = LabelNestedState(name=States.{{ state.name }}, on_exit={{ state.on_exit }})
{% else %}
{{ state.name }} = LabelNestedState(name=States.{{ state.name }})
{% endif %}
{%- endfor %}

{% for state in states %}
{%- if state.children %}
{% set substates = "[" + ", ".join(state.substates|map("string")) + "]" %}{{ state.name }}.add_substates({{ substates }})
{%- endif %}
{%- endfor %}

rpa_states = [
{%- for state in tree %}
    State.{{ state.name }},
{%- endfor %}
]


